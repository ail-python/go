name: CI â€” Super Pipeline (Hourly & Manual)

on:
  schedule:
    - cron: '0 * * * *'       # every hour (UTC)
  workflow_dispatch:
    inputs:
      skip_docker:
        description: 'Set to true to skip Docker build & scan when running manually'
        required: false
        default: 'false'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  id-token: write
  security-events: write   # needed for Code Scanning API on push
  actions: read

env:
  PYTEST_JUNIT: reports/junit.xml

jobs:
  prepare:
    name: Prepare environment & cache
    runs-on: ubuntu-latest
    outputs:
      go-version: 1.21.x
      python-version: 3.11
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup QEMU (optional, for cross-platform container builds)
        uses: docker/setup-qemu-action@v2

      - name: Cache Go modules
        if: ${{ hashFiles('**/go.sum') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Cache pip
        if: ${{ hashFiles('**/requirements.txt') != '' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.x

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install system packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git curl jq build-essential

      - name: Install Python dev tools (if Python sources or requirements exist)
        if: ${{ hashFiles('**/*.py') != '' || hashFiles('**/requirements.txt') != '' }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install --upgrade ruff mypy pytest pytest-asyncio pip-audit bandit pre-commit || true

      - name: Install golangci-lint (if Go sources exist)
        if: ${{ hashFiles('**/*.go') != '' }}
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $HOME/bin v1.54.2
          echo "$HOME/bin" >> $GITHUB_PATH

  lint:
    name: Lint (Python + Go)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Restore caches (pip/go)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-combined-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/requirements.txt') }}
      - name: Run ruff (Python linter/formatter)
        run: |
          if command -v ruff >/dev/null 2>&1 && (ls **/*.py >/dev/null 2>&1 || ls *.py >/dev/null 2>&1); then
            ruff check .
          else
            echo "ruff not present or no python files found, skipping"
          fi
      - name: Run mypy (optional static typing)
        run: |
          if command -v mypy >/dev/null 2>&1 && (ls **/*.py >/dev/null 2>&1 || ls *.py >/dev/null 2>&1); then
            mypy --ignore-missing-imports || echo "mypy issues (non-blocking)"
          else
            echo "mypy not present or no python files found, skipping"
          fi
      - name: Run golangci-lint (Go)
        run: |
          if command -v golangci-lint >/dev/null 2>&1 && find . -name '*.go' | grep -q .; then
            golangci-lint run ./...
          else
            echo "golangci-lint not present or no go files found, skipping"
          fi

  unit-tests:
    name: Unit & Integration tests (Python + Go)
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: true
      matrix:
        language: [python, go]
    steps:
      - uses: actions/checkout@v4

      - name: Setup tooling for matrix
        run: |
          if [ "${{ matrix.language }}" = "python" ]; then
            python -m pip install --upgrade pip
            pip install pytest pytest-asyncio || true
          else
            echo "Go matrix: ensuring module cache"
            go env -w GO111MODULE=on || true
          fi

      - name: Run pytest (Python)
        if: matrix.language == 'python'
        run: |
          if [ -f pytest.ini ] || [ -d tests ] || ls **/*_test.py >/dev/null 2>&1 || ls *_test.py >/dev/null 2>&1; then
            mkdir -p reports
            pytest -q --maxfail=1 --junitxml=${{ env.PYTEST_JUNIT }}
          else
            echo "no python tests detected, skipping pytest"
          fi

      - name: Run go test (Go)
        if: matrix.language == 'go'
        run: |
          if find . -name '*_test.go' | grep -q .; then
            go test ./... -count=1 -v
          else
            echo "no go tests detected, skipping go test"
          fi

      - name: Upload Python JUnit (if present)
        if: matrix.language == 'python' && (hashFiles('**/pytest.ini') != '' || hashFiles('**/tests/**') != '')
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: ${{ env.PYTEST_JUNIT }}

  static-security:
    name: Static & Security scans
    runs-on: ubuntu-latest
    needs: prepare
    # Avoid running CodeQL on PRs from forks (permission issues). Runs on push / trusted events.
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect languages
        id: detect
        run: |
          LANGS=""
          if find . -name '*.py' | grep -q .; then LANGS="${LANGS}python,"; fi
          if find . -name '*.go' | grep -q .; then LANGS="${LANGS}go,"; fi
          LANGS=${LANGS%,}
          if [ -z "$LANGS" ]; then LANGS="python"; fi
          echo "languages=$LANGS" >> $GITHUB_OUTPUT

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ steps.detect.outputs.languages }}

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: pip-audit (Python dependencies)
        if: ${{ hashFiles('**/requirements.txt') != '' }}
        run: |
          pip-audit --progress wheel || echo "pip-audit returned issues"

      - name: Bandit security scan (Python)
        if: ${{ hashFiles('**/*.py') != '' }}
        run: |
          bandit -r . -ll || echo "bandit reported issues"

      - name: gosec (Go security)
        if: ${{ hashFiles('**/*.go') != '' }}
        run: |
          curl -sSfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | bash -s -- -b $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH
          $HOME/bin/gosec ./...

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, lint]
    steps:
      - uses: actions/checkout@v4

      - name: Build Go binaries
        run: |
          if find . -name '*.go' | grep -q .; then
            mkdir -p build/bin
            go env -w GO111MODULE=on || true
            if [ -d cmd ]; then
              for d in cmd/*; do
                if [ -f "$d" ]; then continue; fi
                pkg=$(basename "$d")
                (cd cmd/${pkg} && go build -o ../../build/bin/${pkg}) || true
              done
            else
              go build -o build/bin/app ./... || true
            fi
          else
            echo "no go files to build"
          fi

      - name: Build Python wheel
        run: |
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            python -m pip install build
            python -m build
          else
            echo "no python packaging metadata found, skipping wheel build"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/**
            dist/**

  container-scan:
    name: Docker Build & Trivy Scan (if Dockerfile exists)
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.skip_docker != 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for Dockerfile
        id: dockerfile-check
        run: |
          if [ -f Dockerfile ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image (no push)
        if: steps.dockerfile-check.outputs.found == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:ci-${{ github.run_id }}

      - name: Scan image with Trivy
        if: steps.dockerfile-check.outputs.found == 'true'
        uses: aquasecurity/trivy-action@v1
        with:
          scan-type: image
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:ci-${{ github.run_id }}
          format: table

  collect:
    name: Collect logs & reports
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, static-security, build]
    steps:
      - name: Upload all logs & reports
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-and-reports
          path: |
            **/*.log
            reports/**
            build/**
            dist/**
            .github/workflows/**
