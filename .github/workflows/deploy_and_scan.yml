name: Deploy and Scan Proxies

# TRIGGERS
# This workflow runs:
# 1. On a schedule (every 6 hours).
# 2. When manually dispatched from the GitHub Actions UI.
# 3. On every push to the `main` branch.
on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch: {}
  push:
    branches:
      - main

# PERMISSIONS
# Grants the workflow permissions to write to the repository contents.
# This is absolutely essential for the "commit and push" step to work.
permissions:
  contents: write

jobs:
  scan-and-commit-results:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for accurate change detection
          fetch-depth: 0

      - name: 2. Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # Cache dependencies for faster runs

      - name: 3. Install Python Dependencies
        run: pip install -r requirements.txt

      - name: 4. Bootstrap and Download Core Binaries
        run: bash ./bootstrap.sh
        env:
          # CRITICAL: This environment variable tells the bootstrap script to download
          # the actual Xray and Hiddify binaries, not just create placeholder stubs.
          # Without this, the scanner would fail.
          DOWNLOAD_CORES: 1
      
      - name: 5. Run the Scanner
        run: python -m src.main
        # This executes the core logic of the application:
        # Fetches -> Tests -> Filters -> Generates output files.

      - name: 6. Configure Git for Commit
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: 7. Commit and Push Updated Subscriptions
        run: |
          # Add all changes within the 'subscription' directory.
          # The -A flag ensures that file deletions are also staged.
          git add -A subscription/

          # Check if there are any staged changes.
          # The "git diff" command will exit with a non-zero status if there are changes.
          if ! git diff --staged --quiet; then
            echo "âœ… Changes detected in subscription files. Committing and pushing..."
            # Create a commit with a timestamp.
            git commit -m "ðŸš€ Auto-update subscriptions on $(date -u)"
            
            # Push the changes to the current branch.
            # Using `github.ref_name` makes this robust for any branch.
            git push origin ${{ github.ref_name }}
            
            echo "âœ… Successfully pushed updated files."
          else
            echo "âœ… No changes to subscription files. Nothing to commit."
          fi
