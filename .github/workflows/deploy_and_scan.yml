name: Ultimate Deploy, Scan, and Notify

# Triggers
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}
  # schedule:
  #   - cron: "0 * * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  TCP_TIMEOUT: "3.0"
  HTTP_TIMEOUT: "5.0"
  DOWNLOAD_TIMEOUT: "8.0"
  CONNECTION_TIMEOUT: "4.0"
  STRICT: "false"

jobs:
  ################################################################
  # 0) Preflight: check required files and secrets (warn/decide)
  ################################################################
  preflight:
    name: Preflight validations
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.check.outputs.ok }}
      deploy_ready: ${{ steps.check.outputs.deploy_ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Ensure required scripts/files and detect deployment credentials (non-fatal)
        id: check
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GCP_WI_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          missing=()
          # Optional project scripts - warn if missing but don't fail the whole pipeline.
          for f in scripts/deploy_firebase.sh src/fetcher.py src/xray_tester.py src/hiddify_tester.py src/filter.py src/reporter.py scripts/verify_output.py; do
            if [ ! -e "$f" ]; then
              echo "Warning: optional file not found: $f"
              missing+=("$f")
            fi
          done

          # Decide if deploy is possible (either token or workload identity provider must exist)
          deploy_ready=false
          if [ -n "${FIREBASE_TOKEN:-}" ] || [ -n "${GCP_WI_PROVIDER:-}" ]; then
            deploy_ready=true
          else
            echo "Warning: No deployment credential found. Deploy/notify jobs will be skipped."
          fi

          # CODECOV token presence noted (upload skipped if absent)
          if [ -z "${CODECOV_TOKEN:-}" ]; then
            echo "Note: CODECOV_TOKEN is not set. Codecov upload will be skipped for private repos."
          fi

          # This preflight step will not fail the workflow; it only publishes outputs for downstream decisions.
          echo "ok=true" >> $GITHUB_OUTPUT
          echo "deploy_ready=${deploy_ready}" >> $GITHUB_OUTPUT

  ################################################################
  # 1) Quality & Security (CI matrix)
  ################################################################
  quality_and_security_shield:
    name: Cross-Platform Quality & Security Shield
    needs: preflight
    if: needs.preflight.outputs.ok == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install requirements (if present)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
          else
            echo "requirements.txt not found, skipping."
          fi

      - name: Install dev tools (lint/test/security)
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 bandit pip-audit pytest coverage

      - name: Lint (flake8) — configurable strictness
        env:
          STRICT: ${{ env.STRICT }}
        run: |
          if [ "${STRICT}" = "true" ]; then
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          else
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          fi

      - name: Security scan: bandit
        run: |
          bandit -r . -ll -ii || true

      - name: Dependency scan: pip-audit
        run: |
          pip-audit || true

      - name: Run tests + collect coverage
        id: run_tests
        run: |
          set -euo pipefail
          coverage_exists=false

          if python -m pytest --cov=src --cov-report=xml; then
            if [ -f coverage.xml ]; then
              coverage_exists=true
            fi
          else
            echo "pytest returned non-zero exit code"
            if [ "${STRICT}" = "true" ]; then
              exit 1
            fi
          fi

          echo "coverage_exists=${coverage_exists}" >> $GITHUB_OUTPUT

      - name: Upload coverage to Codecov (only when coverage exists and token present)
        if: ${{ steps.run_tests.outputs.coverage_exists == 'true' && secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: ${{ matrix.os }}
          fail_ci_if_error: true

  ################################################################
  # 2) Build & Scan (fetch → test → filter → report)
  ################################################################
  build_and_scan:
    name: Build and Scan
    needs: [preflight, quality_and_security_shield]
    if: needs.preflight.outputs.ok == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 40
    outputs:
      proxy_count: ${{ steps.count_proxies.outputs.count }}
    env:
      PYTHONPATH: src

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ubuntu-latest-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ubuntu-latest-pip-

      - name: Install dependencies (if exist)
        run: |
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi

      - name: Install application components (cores) if needed
        id: install_cores
        run: |
          if [ -f install.py ]; then
            python install.py || echo "install.py failed (check logs)"
          else
            echo "install.py not present - skipping cores install"
          fi

      - name: 1. Fetch Subscription Sources (if present)
        run: |
          set -e
          if [ -f src/fetcher.py ]; then
            python3 -m src.fetcher
          else
            echo "Skipping fetcher: src/fetcher.py not found"
          fi

      - name: 2. Test Proxies (Xray) — if xray tester exists
        run: |
          if [ -f src/xray_tester.py ]; then
            python3 -m src.xray_tester
          else
            echo "Skipping xray_tester: src/xray_tester.py not found"
          fi

      - name: 3. Test Proxies (Hiddify) — if hiddify tester exists
        run: |
          if [ -f src/hiddify_tester.py ]; then
            python3 -m src.hiddify_tester
          else
            echo "Skipping hiddify_tester: src/hiddify_tester.py not found"
          fi

      - name: 4. Filter and Generate Lists
        run: |
          if [ -f src/filter.py ]; then
            python3 -m src.filter
          else
            echo "Skipping filter: src/filter.py not found"
          fi

      - name: 5. Generate Final Reports
        run: |
          if [ -f src/reporter.py ]; then
            python3 -m src.reporter
          else
            echo "Skipping reporter: src/reporter.py not found"
          fi

      - name: 6. Self-Verification Gate
        run: |
          if [ -f scripts/verify_output.py ]; then
            python3 scripts/verify_output.py || echo "verify_output failed (check logs)"
          else
            echo "Skipping verify_output: scripts/verify_output.py not found"
          fi

      - name: Count Proxies (always runs)
        id: count_proxies
        if: always()
        run: |
          set -euo pipefail
          cnt=0
          if [ -f output/all.txt ]; then
            cnt=$(wc -l < output/all.txt | tr -d ' ')
          fi
          echo "Found $cnt proxies."
          echo "count=$cnt" >> $GITHUB_OUTPUT

      - name: Ensure artifact dirs exist (avoid upload failure)
        if: always()
        run: |
          mkdir -p output logs
          if [ ! -f output/.placeholder ]; then touch output/.placeholder; fi

      - name: Upload scan results and logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: scan-results
          path: |
            output/
            logs/
          retention-days: 7

  ################################################################
  # 3) Deploy (Firebase) — runs only when deploy credentials present
  ################################################################
  deploy:
    name: Deploy to Firebase
    needs: build_and_scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: needs.preflight.outputs.ok == 'true' && needs.preflight.outputs.deploy_ready == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node & firebase-tools
        run: |
          if ! command -v firebase >/dev/null 2>&1; then
            npm install -g firebase-tools
          fi
          firebase --version || true

      - name: Make deploy script executable
        run: |
          if [ -f scripts/deploy_firebase.sh ]; then chmod +x scripts/deploy_firebase.sh; fi

      - name: Deploy to Firebase (prefer FIREBASE_TOKEN; fallback => guidance)
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          if [ -n "${FIREBASE_TOKEN:-}" ]; then
            echo "Using FIREBASE_TOKEN to deploy."
            if [ -f scripts/deploy_firebase.sh ]; then
              ./scripts/deploy_firebase.sh
            else
              echo "deploy_firebase.sh missing; aborting deploy."
              exit 1
            fi
          else
            echo "FIREBASE_TOKEN is not provided. To deploy without a token, configure Workload Identity (OIDC) and update this job."
            exit 1
          fi

  ################################################################
  # 4) Notify Users (FCM) — uses OIDC / Workload Identity (only if present)
  ################################################################
  notify_users:
    name: Notify Users (FCM)
    needs: [deploy, build_and_scan]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: needs.preflight.outputs.ok == 'true' && needs.preflight.outputs.deploy_ready == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate using Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Get access token
        id: get_token
        run: |
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          echo "access_token=${ACCESS_TOKEN}" >> $GITHUB_OUTPUT

      - name: Send FCM notification (data-driven)
        env:
          PROXY_COUNT: ${{ needs.build_and_scan.outputs.proxy_count }}
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          TITLE="Proxies Updated"
          BODY="${PROXY_COUNT} new proxies are available!"
          cat > /tmp/fcm_payload.json <<EOF
{
  "message": {
    "topic": "news",
    "notification": {
      "title": "${TITLE}",
      "body": "${BODY}"
    },
    "data": {
      "update_type": "proxy_list",
      "proxy_count": "${PROXY_COUNT}",
      "timestamp": "$(date +%s)"
    }
  }
}
EOF
          curl -sS -X POST "https://fcm.googleapis.com/v1/projects/${GCP_PROJECT_ID}/messages:send" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d @/tmp/fcm_payload.json
