
# GitHub Actions workflow for deploying to Firebase and running a smoke scan
#
# This workflow is designed to be robust, efficient, and to follow best practices.
# It will automatically deploy your application to Firebase after a successful smoke scan.
#
# To use this workflow, you will need to add a secret to your GitHub repository:
# - FIREBASE_TOKEN: Your Firebase token for authentication.

name: Deploy and Scan

on:
  push:
    branches:
      - main

# Concurrency control to prevent multiple runs from conflicting.
# This will cancel any previous in-progress runs on the same branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set default permissions for the GITHUB_TOKEN to read-only for security.
permissions:
  contents: read

jobs:
  quality_and_security_shield:
    name: Quality and Security Shield
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      # --- Professional Quality Gate: Code Linting ---
      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # --- Professional Quality Gate: Unit Testing ---
      - name: Run unit tests with pytest
        run: pytest

      # --- Professional Security Gate: Vulnerability Scanning ---
      - name: Scan for dependency vulnerabilities with pip-audit
        run: pip-audit

  build_and_scan:
    name: Build and Scan
    needs: quality_and_security_shield
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      TCP_TIMEOUT: "3.0"
      HTTP_TIMEOUT: "5.0"
      DOWNLOAD_TIMEOUT: "8.0"
      CONNECTION_TIMEOUT: "4.0"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Core Binaries
        uses: actions/cache@v3
        id: cache-cores
        with:
          path: ./cores
          key: ${{ runner.os }}-cores-${{ hashFiles('install.py') }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install application components (cores)
        if: steps.cache-cores.outputs.cache-hit != 'true'
        run: python install.py

      - name: 1. Fetch Subscription Sources
        run: python3 -m src.fetcher

      - name: 2. Test Proxies (Xray)
        run: python3 -m src.xray_tester

      - name: 3. Test Proxies (Hiddify)
        run: python3 -m src.hiddify_tester

      - name: 4. Filter and Generate Lists
        run: python3 -m src.filter

      - name: 5. Generate Final Reports
        run: python3 -m src.reporter

      - name: Upload scan results and logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: scan-results
          path: |
            output/
            logs/
          retention-days: 7

  deploy:
    name: Deploy to Firebase
    needs: build_and_scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Firebase
        run: |
          chmod +x scripts/deploy_firebase.sh
          ./scripts/deploy_firebase.sh
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
