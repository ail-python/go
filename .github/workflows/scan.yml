name: V2Ray Scanner Ultimate - Professional

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"   # Run every hour
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: write   # needed for commit/push
  actions: read

concurrency:
  group: v2ray-scanner
  cancel-in-progress: true

env:
  TZ: UTC
  PYTHONUNBUFFERED: "1"
  TCP_TIMEOUT: "3.0"
  HTTP_TIMEOUT: "5.0"
  DOWNLOAD_TIMEOUT: "8.0"
  MIN_SPEED: "200"
  MAX_LATENCY: "300"
  MAX_PACKET_LOSS: "5.0"
  MAX_JITTER: "50.0"
  MIN_SUCCESS_RATE: "70.0"
  MIN_THROUGHPUT: "0.5"
  MAX_WORKERS: "20"
  BATCH_SIZE: "50"
  LOG_LEVEL: "INFO"
  ENABLE_ANTI_BAN: "true"
  REQUEST_DELAY: "0.1"

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # ensure GITHUB_TOKEN available for pushes

      - name: 🔍 Repo quick debug (list useful files)
        run: |
          set -euo pipefail
          echo "=== pwd ==="; pwd
          echo "=== top-level files ==="; ls -la || true
          echo "=== tree (2 levels) ==="; find . -maxdepth 2 -type f -print | sed -e 's/^/ - /' || true

      - name: ✅ Prepare output dirs & set PYTHONPATH
        run: |
          set -euo pipefail
          mkdir -p output output/reports output/stats logs tmp bin
          echo "PYTHONPATH=." >> "$GITHUB_ENV"
          echo "Prepared output dirs"

      - name: 🔎 Detect common pitfalls (shadowed stdlib)
        run: |
          set -euo pipefail
          echo "Searching for repo files that may shadow Python stdlib..."
          git ls-files | grep -E '(^|/)(importlib|pkgutil|pathlib|runpy|json|os)\.py$' || true
          if git ls-files | grep -E '(^|/)(importlib|pkgutil|pathlib|runpy|json|os)\.py$' > /dev/null 2>&1; then
            echo "⚠️ WARNING: Found files that may shadow Python stdlib. Consider renaming them."
          else
            echo "No obvious stdlib-shadowing files found."
          fi

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: 📦 Cache extra (pip, cores)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            cores/
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/bootstrap.sh') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget curl unzip ca-certificates bc || true

      - name: 📋 Install Python dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || echo "⚠️ pip install returned non-zero (continuing)"
          else
            echo "requirements.txt not found, skipping pip install."
          fi

      - name: 🚀 Setup project (robust bootstrap)
        env:
          BOOTSTRAP_URL: ${{ secrets.BOOTSTRAP_URL || '' }}
        run: |
          set -euo pipefail
          echo "Working dir: $(pwd)"
          ls -la || true

          if [ -f "./bootstrap.sh" ]; then
            echo "Found ./bootstrap.sh — running it"
            chmod +x ./bootstrap.sh
            ./bootstrap.sh || echo "⚠️ ./bootstrap.sh exited non-zero (continuing)"
          elif [ -f "./scripts/bootstrap.sh" ]; then
            echo "Found ./scripts/bootstrap.sh — running it"
            chmod +x ./scripts/bootstrap.sh
            ./scripts/bootstrap.sh || echo "⚠️ ./scripts/bootstrap.sh exited non-zero (continuing)"
          else
            echo "No local bootstrap script found."
            if [ -n "$BOOTSTRAP_URL" ]; then
              echo "BOOTSTRAP_URL set — attempting secure download"
              curl -fsSL "$BOOTSTRAP_URL" -o /tmp/bootstrap.sh || echo "⚠️ Failed to download from BOOTSTRAP_URL (continuing)"
              if [ -f /tmp/bootstrap.sh ]; then
                chmod +x /tmp/bootstrap.sh
                /tmp/bootstrap.sh || echo "⚠️ downloaded bootstrap exited non-zero (continuing)"
              fi
            fi

            # Create safe placeholder to avoid exit code 127 later
            echo "#!/usr/bin/env bash" > ./bootstrap.sh
            echo "echo 'Placeholder bootstrap: nothing to setup. Add a real bootstrap.sh or set BOOTSTRAP_URL secret.'" >> ./bootstrap.sh
            chmod +x ./bootstrap.sh
            echo "Created placeholder ./bootstrap.sh — continuing workflow."
          fi

          echo "Bootstrap step completed."

      - name: ✅ Verify configuration (filesystem-driven)
        run: |
          set -euo pipefail
          if [ -f src/config.py ]; then
            echo "Running src/config.py (filesystem-driven)"
            python3 src/config.py || echo "⚠️ src/config.py failed (continuing)"
          elif [ -d src/config ] && [ -f src/config/__main__.py ]; then
            echo "Running package src.config via -m"
            python3 -m src.config || echo "⚠️ src.config failed (continuing)"
          else
            echo "Module src.config not found — skipping verification step."
          fi

      - name: 📥 Fetch subscriptions (filesystem-driven)
        run: |
          set -euo pipefail
          if [ -f src/fetcher.py ]; then
            python3 src/fetcher.py || echo "⚠️ src/fetcher.py failed (continuing)"
          elif [ -d src/fetcher ] && [ -f src/fetcher/__main__.py ]; then
            python3 -m src.fetcher || echo "⚠️ src.fetcher module failed (continuing)"
          else
            echo "Module src.fetcher not found — skipping fetcher step."
          fi
        timeout-minutes: 8
        continue-on-error: true

      - name: 🧪 Test with Xray Core (filesystem-driven)
        run: |
          set -euo pipefail
          if [ -f src/xray_tester.py ]; then
            python3 src/xray_tester.py || echo "⚠️ xray_tester failed (continuing)"
          elif [ -d src/xray_tester ] && [ -f src/xray_tester/__main__.py ]; then
            python3 -m src.xray_tester || echo "⚠️ xray_tester module failed (continuing)"
          else
            echo "Module src.xray_tester not found — skipping Xray tester."
          fi
        timeout-minutes: 20
        continue-on-error: true

      - name: 🧪 Test with Hiddify Core (filesystem-driven)
        run: |
          set -euo pipefail
          if [ -f src/hiddify_tester.py ]; then
            python3 src/hiddify_tester.py || echo "⚠️ hiddify_tester failed (continuing)"
          elif [ -d src/hiddify_tester ] && [ -f src/hiddify_tester/__main__.py ]; then
            python3 -m src.hiddify_tester || echo "⚠️ hiddify_tester module failed (continuing)"
          else
            echo "Module src.hiddify_tester not found — skipping Hiddify tester."
          fi
        timeout-minutes: 20
        continue-on-error: true

      - name: 🔍 Filter results (filesystem-driven)
        run: |
          set -euo pipefail
          if [ -f src/filter.py ]; then
            python3 src/filter.py || echo "⚠️ filter.py failed (continuing)"
          elif [ -d src/filter ] && [ -f src/filter/__main__.py ]; then
            python3 -m src.filter || echo "⚠️ filter module failed (continuing)"
          else
            echo "Module src.filter not found — skipping filter step."
          fi
        timeout-minutes: 8
        continue-on-error: true

      - name: 📊 Generate report (filesystem-driven)
        run: |
          set -euo pipefail
          if [ -f src/reporter.py ]; then
            python3 src/reporter.py || echo "⚠️ reporter.py failed (continuing)"
          elif [ -d src/reporter ] && [ -f src/reporter/__main__.py ]; then
            python3 -m src.reporter || echo "⚠️ reporter module failed (continuing)"
          else
            echo "Module src.reporter not found — skipping reporter."
          fi
        timeout-minutes: 5
        continue-on-error: true

      - name: 🔁 Ensure artifact placeholders (avoid "no files found")
        run: |
          set -euo pipefail
          mkdir -p output output/reports output/stats logs
          for f in output/merged_nodes.txt output/merged_sub_base64.txt logs/scan.log; do
            if [ ! -f "$f" ]; then
              echo "Placeholder for $f created at $(date -u)" > "$f"
            fi
          done
          echo "Placeholders ensured."

      - name: 🔍 Show output files (debug)
        run: |
          set -euo pipefail
          echo "=== output tree ==="; find output -maxdepth 3 -type f -print || true
          echo "=== logs tree ==="; find logs -maxdepth 3 -type f -print || true

      - name: 📦 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.run_number }}-${{ matrix.python-version }}
          path: |
            output/**
            logs/**
          retention-days: 7
          if-no-files-found: warn

      - name: 📈 Update repository (commit generated outputs)
        if: always()
        run: |
          set -euo pipefail
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add output/ logs/ || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Auto-update outputs - Run #${{ github.run_number }}" || echo "commit failed"
            git push || echo "push failed — ensure repo Actions has write access"
          fi
        continue-on-error: true

      - name: 🎯 Success notification
        if: success()
        run: |
          echo "✅ Scan completed successfully!"

      - name: ⚠️ Failure notification
        if: failure()
        run: |
          echo "❌ Scan failed! Check logs and uploaded artifacts."
