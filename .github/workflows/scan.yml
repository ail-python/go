name: V2Ray Scanner Ultimate - Professional

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"   # Run every hour
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  TZ: UTC
  PYTHONUNBUFFERED: "1"
  TCP_TIMEOUT: "3.0"
  HTTP_TIMEOUT: "5.0"
  DOWNLOAD_TIMEOUT: "8.0"
  MIN_SPEED: "200"
  MAX_LATENCY: "300"
  MAX_PACKET_LOSS: "5.0"
  MAX_JITTER: "50.0"
  MIN_SUCCESS_RATE: "70.0"
  MIN_THROUGHPUT: "0.5"
  MAX_WORKERS: "20"
  BATCH_SIZE: "50"
  LOG_LEVEL: "INFO"
  ENABLE_ANTI_BAN: "true"
  REQUEST_DELAY: "0.1"

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Repo debug (show files)
        run: |
          echo "=== current directory ==="
          pwd
          echo
          echo "=== root listing ==="
          ls -la
          echo
          echo "=== top-level tree (2 levels) ==="
          find . -maxdepth 2 -type f -print | sed -e 's/^/ - /'

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            cores/
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/bootstrap.sh') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl unzip ca-certificates bc

      - name: 📋 Install Python dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, skipping pip install -r requirements.txt"
          fi

      - name: 🚀 Setup project (safe)
        run: |
          set -euo pipefail
          # Try root bootstrap.sh, then scripts/bootstrap.sh — در صورتی نبودن هر دو، مرحله را با پیام رد می‌کنیم
          if [ -f "./bootstrap.sh" ]; then
            echo "Found ./bootstrap.sh — running it"
            chmod +x ./bootstrap.sh
            ./bootstrap.sh
          elif [ -f "./scripts/bootstrap.sh" ]; then
            echo "Found ./scripts/bootstrap.sh — running it"
            chmod +x ./scripts/bootstrap.sh
            ./scripts/bootstrap.sh
          else
            echo "⚠️ bootstrap.sh not found in repo root or ./scripts/. Skipping bootstrap step."
            echo "If bootstrap.sh is required, add it to the repo root or update the workflow path."
          fi

      - name: ✅ Verify configuration (if module exists)
        run: |
          set -euo pipefail
          if python -c "import importlib, sys; sys.exit(0 if importlib.util.find_spec('src.config') else 1)"; then
            python3 -m src.config
          else
            echo "Module src.config not found — skipping verification step."
          fi

      - name: 📥 Fetch subscriptions (if module exists)
        run: |
          set -euo pipefail
          if python -c "import importlib, sys; sys.exit(0 if importlib.util.find_spec('src.fetcher') else 1)"; then
            python3 -m src.fetcher
          else
            echo "Module src.fetcher not found — skipping fetcher step."
          fi
        timeout-minutes: 5

      - name: 🧪 Test with Xray Core
        run: |
          set -euo pipefail
          if python -c "import importlib, sys; sys.exit(0 if importlib.util.find_spec('src.xray_tester') else 1)"; then
            python3 -m src.xray_tester
          else
            echo "Module src.xray_tester not found — skipping Xray tester."
          fi
        timeout-minutes: 15
        continue-on-error: true

      - name: 🧪 Test with Hiddify Core
        run: |
          set -euo pipefail
          if python -c "import importlib, sys; sys.exit(0 if importlib.util.find_spec('src.hiddify_tester') else 1)"; then
            python3 -m src.hiddify_tester
          else
            echo "Module src.hiddify_tester not found — skipping Hiddify tester."
          fi
        timeout-minutes: 15
        continue-on-error: true

      - name: 🔍 Filter results (if module exists)
        run: |
          set -euo pipefail
          if python -c "import importlib, sys; sys.exit(0 if importlib.util.find_spec('src.filter') else 1)"; then
            python3 -m src.filter
          else
            echo "Module src.filter not found — skipping filter step."
          fi
        timeout-minutes: 5

      - name: 📊 Generate report (if module exists)
        run: |
          set -euo pipefail
          if python -c "import importlib, sys; sys.exit(0 if importlib.util.find_spec('src.reporter') else 1)"; then
            python3 -m src.reporter
          else
            echo "Module src.reporter not found — skipping reporter."
          fi
        timeout-minutes: 3

      - name: 📦 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.run_number }}-${{ matrix.python-version }}
          path: |
            output/merged_nodes.txt
            output/merged_sub_base64.txt
            output/reports/
            output/stats/
            logs/
          retention-days: 7
          if-no-files-found: warn

      - name: 📈 Update repository
        run: |
          set -euo pipefail
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add output/merged_nodes.txt output/merged_sub_base64.txt output/reports/ output/stats/ || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Auto-update configs - Run #${{ github.run_number }}" || echo "commit failed"
            git push || echo "push failed (check permissions)"
          fi
        continue-on-error: true

      - name: 🎯 Success notification
        if: success()
        run: |
          echo "✅ Scan completed successfully!"
          echo "📊 Results saved to artifacts"

      - name: ⚠️ Failure notification
        if: failure()
        run: |
          echo "❌ Scan failed!"
          echo "Check the log above and artifacts. (This step won't force an additional exit code.)"
