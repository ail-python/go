#!/usr/bin/env bash
set -euo pipefail

# Lightweight bootstrap for local development and CI
# - creates cores/, output/, cache/, logs/
# - places small executable stubs for xray/hiddify so the scanner can run locally
# - optional: when DOWNLOAD_CORES=1, attempts to download real binaries (user opt-in)

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
mkdir -p "$ROOT_DIR/cores" "$ROOT_DIR/output" "$ROOT_DIR/cache" "$ROOT_DIR/logs"

echo "[bootstrap] workspace: $ROOT_DIR"

STUB_XRAY="$ROOT_DIR/cores/xray"
STUB_HIDDIFY="$ROOT_DIR/cores/hiddify"

# Create small stub executables if the real binaries are not present
if [ ! -f "$STUB_XRAY" ]; then
  cat > "$STUB_XRAY" <<'SH'
#!/usr/bin/env sh
# Minimal stub to mimic a core for local tests. Accepts '-c <file>' but does nothing.
while [ "$#" -gt 0 ]; do
  case "$1" in
    -c) shift; CFG="$1"; shift;;
    *) shift;;
  esac
done
echo "[xray-stub] started with config: ${CFG:-none}" >&2
sleep 0.1
exit 0
SH
  chmod +x "$STUB_XRAY"
  echo "[bootstrap] created stub core: $STUB_XRAY"
else
  echo "[bootstrap] xray core already exists: $STUB_XRAY"
fi

if [ ! -f "$STUB_HIDDIFY" ]; then
  cat > "$STUB_HIDDIFY" <<'SH'
#!/usr/bin/env sh
# Minimal stub to mimic a core for local tests. Accepts '-c <file>' but does nothing.
while [ "$#" -gt 0 ]; do
  case "$1" in
    -c) shift; CFG="$1"; shift;;
    *) shift;;
  esac
done
echo "[hiddify-stub] started with config: ${CFG:-none}" >&2
sleep 0.1
exit 0
SH
  chmod +x "$STUB_HIDDIFY"
  echo "[bootstrap] created stub core: $STUB_HIDDIFY"
else
  echo "[bootstrap] hiddify core already exists: $STUB_HIDDIFY"
fi

# Create minimal output placeholders if missing
if [ ! -f "$ROOT_DIR/output/merged_nodes.txt" ]; then
  echo "# merged_nodes generated by bootstrap at $(date -u +%Y-%m-%dT%H:%M:%SZ)" > "$ROOT_DIR/output/merged_nodes.txt"
  echo "[bootstrap] wrote placeholder $ROOT_DIR/output/merged_nodes.txt"
fi
if [ ! -f "$ROOT_DIR/output/merged_sub_base64.txt" ]; then
  echo "# merged_sub_base64 generated by bootstrap" > "$ROOT_DIR/output/merged_sub_base64.txt"
  echo "[bootstrap] wrote placeholder $ROOT_DIR/output/merged_sub_base64.txt"
fi

echo "[bootstrap] basic filesystem and stubs are ready"

if [ "${DOWNLOAD_CORES:-0}" = "1" ]; then
  echo "[bootstrap] DOWNLOAD_CORES=1; attempting to download official cores (network required)"
  # Example download section - user may replace the URLs with trusted mirrors
  XRAY_URLS=(
    "https://github.com/XTLS/Xray-core/releases/download/v1.25.8/xray-linux-64.zip"
  )
  HIDDIFY_URLS=(
    "https://example.org/hiddify-core/hiddify-linux.tar.gz"
  )

  tmpd=$(mktemp -d)
  trap 'rm -rf "$tmpd"' EXIT

  for u in "${XRAY_URLS[@]}"; do
    echo "[bootstrap] downloading xray from $u"
    if curl -fsSL -o "$tmpd/xray.zip" "$u"; then
      echo "[bootstrap] downloaded xray archive"
      # extraction best effort; user responsibility
      unzip -o "$tmpd/xray.zip" -d "$tmpd" || true
      # attempt to find a binary
      find "$tmpd" -type f -name 'xray*' -perm /u+x -exec cp {} "$STUB_XRAY" \; || true
    fi
  done

  for u in "${HIDDIFY_URLS[@]}"; do
    echo "[bootstrap] downloading hiddify from $u"
    if curl -fsSL -o "$tmpd/hiddify.tar.gz" "$u"; then
      tar xzf "$tmpd/hiddify.tar.gz" -C "$tmpd" || true
      find "$tmpd" -type f -name 'hiddify*' -perm /u+x -exec cp {} "$STUB_HIDDIFY" \; || true
    fi
  done

  chmod +x "$STUB_XRAY" || true
  chmod +x "$STUB_HIDDIFY" || true
  echo "[bootstrap] download step finished"
fi

echo "[bootstrap] running a lightweight validation: python -m src.main"
set +e
python3 -m src.main
rc=$?
set -e
if [ $rc -eq 0 ]; then
  echo "[bootstrap] validation runner succeeded"
else
  echo "[bootstrap] validation runner exited with code $rc (this may be expected if sources are empty)"
fi

echo "[bootstrap] done"
